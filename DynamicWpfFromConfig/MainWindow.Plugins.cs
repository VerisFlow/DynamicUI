using DynamicWpfFromConfig.Models;
using Microsoft.Win32;
using System.IO;
using System.Windows;
using System.Windows.Controls;
using System.Windows.Data;

namespace DynamicWpfFromConfig
{
    public partial class MainWindow : Window
    {
        #region Plugin Infrastructure

        /// <summary>
        /// This private class implements the IPluginContext interface.
        /// It acts as a "bridge" or "proxy" that gives plugins a safe, limited 
        /// way to call back into the MainWindow (the Host).
        /// All calls are marshalled onto the UI thread.
        /// </summary>
        private class PluginContext : IPluginContext
        {
            private MainWindow _host;

            /// <summary>
            /// Initializes a new instance of the <see cref="PluginContext"/> class.
            /// </summary>
            /// <param name="host">The main window instance that is hosting the plugin.</param>
            public PluginContext(MainWindow host)
            {
                _host = host;
            }

            /// <summary>
            /// Gets the current value from a specified UI control.
            /// </summary>
            /// <param name="controlName">The 'Name' of the control to read from.</param>
            /// <returns>The value of the control as a string, or string.Empty if not found.</returns>
            public string GetValue(string controlName)
            {
                // Safely uses the host's methods
                var control = _host.FindControlByName(controlName) as FrameworkElement;
                if (control != null)
                {
                    // Must be called on UI thread
                    return _host.Dispatcher.Invoke(() => _host.GetValueFromControl(control));
                }
                return string.Empty;
            }

            /// <summary>
            /// Sets a specific property on a UI control.
            /// </summary>
            /// <param name="controlName">The 'Name' of the control to modify.</param>
            /// <param name="propertyName">The name of the property to set (e.g., "Text", "IsChecked").</param>
            /// <param name="value">The new value to set.</param>
            public void SetValue(string controlName, string propertyName, string value)
            {
                var control = _host.FindControlByName(controlName) as FrameworkElement;
                if (control != null)
                {
                    _host.Dispatcher.Invoke(() => _host.SetControlProperty(control, propertyName, value));
                }
            }

            /// <summary>
            /// Displays a standard message box to the user.
            /// </summary>
            /// <param name="message">The message to display.</param>
            public void ShowMessage(string message)
            {
                _host.Dispatcher.Invoke(() => MessageBox.Show(_host, message));
            }

            /// <summary>
            /// Shows a "File Open" dialog to the user.
            /// </summary>
            /// <param name="filter">The file filter (e.g., "CSV Files (*.csv)|*.csv").</param>
            /// <returns>The full path of the selected file, or null if canceled.</returns>
            public string? ShowOpenFileDialog(string filter)
            {
                return _host.Dispatcher.Invoke(() =>
                {
                    var openFileDialog = new OpenFileDialog { Filter = filter };
                    return openFileDialog.ShowDialog(_host) == true ? openFileDialog.FileName : null;
                });
            }

            /// <summary>
            /// Shows a "File Save" dialog to the user.
            /// </summary>
            /// <param name="defaultFileName">The suggested file name.</param>
            /// <param name="filter">The file filter (e.g., "CSV Files (*.csv)|*.csv").</param>
            /// <returns>The full path of the selected file, or null if canceled.</returns>
            public string? ShowSaveFileDialog(string defaultFileName, string filter)
            {
                return _host.Dispatcher.Invoke(() =>
                {
                    var saveFileDialog = new SaveFileDialog
                    {
                        FileName = defaultFileName,
                        Filter = filter,
                        DefaultExt = Path.GetExtension(defaultFileName) ?? ".csv"
                    };
                    return saveFileDialog.ShowDialog(_host) == true ? saveFileDialog.FileName : null;
                });
            }

            /// <summary>
            /// Binds a collection of data to a DataGrid in the UI.
            /// Also hooks up the host's AutoGeneratedColumns event to allow styling.
            /// </summary>
            /// <param name="gridName">The 'Name' of the DataGrid control.</param>
            /// <param name="itemsSource">The data to bind (e.g., a List, DataTable, etc.).</param>
            public void BindDataToGrid(string gridName, object itemsSource)
            {
                var grid = _host.FindControlByName(gridName) as DataGrid;
                if (grid != null)
                {
                    _host.Dispatcher.Invoke(() =>
                    {
                        // Re-hook the event to ensure column visibility is applied after binding
                        grid.AutoGeneratedColumns -= _host.DataGrid_AutoGeneratedColumns;
                        grid.AutoGeneratedColumns += _host.DataGrid_AutoGeneratedColumns;
                        grid.ItemsSource = itemsSource as System.Collections.IEnumerable ?? new[] { itemsSource };
                    });
                }
            }

            /// <summary>
            /// Gets information (Header and PropertyName) about the currently visible columns in a DataGrid.
            /// </summary>
            /// <param name="gridName">The 'Name' of the DataGrid control.</param>
            /// <returns>A list of <see cref="PluginDataGridColumnInfo"/> objects.</returns>
            public List<PluginDataGridColumnInfo> GetGridColumnInfo(string gridName)
            {
                return _host.Dispatcher.Invoke(() =>
                {
                    var grid = _host.FindControlByName(gridName) as DataGrid;
                    if (grid == null) return new List<PluginDataGridColumnInfo>();

                    return grid.Columns
                        .Where(c => c.Visibility == Visibility.Visible) // Only get visible columns
                        .Select(c =>
                        {
                            string propertyName = string.Empty;
                            // Try to get the underlying property name from the binding
                            if (c is DataGridBoundColumn boundCol && boundCol.Binding is Binding binding)
                            {
                                propertyName = binding.Path.Path;
                            }

                            return new PluginDataGridColumnInfo
                            {
                                Header = c.Header?.ToString() ?? string.Empty,
                                PropertyName = propertyName
                            };
                        }).ToList();
                });
            }

            /// <summary>
            /// Gets the checked state of all CheckBoxes within a specified container (e.g., a WrapPanel).
            /// This relies on the CheckBoxes having their 'Tag' property set to a string key (like a column name).
            /// </summary>
            /// <param name="containerName">The 'Name' of the container control (e.g., "ColumnSelectorPanel").</param>
            /// <returns>A dictionary where the key is the CheckBox's Tag (string) and the value is its checked state (bool).</returns>
            public Dictionary<string, bool> GetCheckBoxStates(string containerName)
            {
                var states = new Dictionary<string, bool>();
                return _host.Dispatcher.Invoke(() =>
                {
                    var container = _host.FindControlByName(containerName) as Panel;
                    if (container != null)
                    {
                        // Iterate through the children of the container
                        foreach (var child in container.Children)
                        {
                            // We only care about CheckBoxes that have a ControlModel Tag,
                            // which in turn has a string Tag (the column name).
                            if (child is CheckBox chk && chk.Tag is ControlModel chkModel && chkModel.Tag is string columnName)
                            {
                                // Store the checkbox state using its Tag (column name) as the key
                                states[columnName] = chk.IsChecked ?? false;
                            }
                        }
                    }
                    return states;
                });
            }
        }
        #endregion
    }
}